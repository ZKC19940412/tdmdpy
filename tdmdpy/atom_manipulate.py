from ase import Atoms
from ase.io import read, write
import mdtraj as mdt

def decompose_dump_xyz(dump_xyz_str, pos_xyz_str='pos.xyz',
                       frc_xyz_str='frc.xyz',
                       vel_xyz_str='vel.xyz'):
    """Decompose information from dump.xyz, generated by GPUMD.
       https://gpumd.zheyongfan.org/index.php/The_dump_exyz_keyword

       input:
       dump_xyz_str: (str) Name of the dump xyz file
       pos_xyz_str: (str) Name of the pos xyz file
       pos_xyz_str: (str) Name of the force/frc xyz file
       vel_xyz_str: (str) Name of the  velocity/vel xyz file

    """
    # Load in static information
    configurations = read(dump_xyz_str, index=':')
    chemical_symbols = configurations[0].get_chemical_symbols()

    # Preset list for sudo atom objects for positions, forces and velocities
    pos_atom_objects = []
    frc_atom_objects = []
    vel_atom_objects = []

    # Decompose position, force and velocity information into lists individually
    for configuration in configurations:
        pos_atom_objects.append(make_atom_object(chemical_symbols, configuration.positions, configuration.cell))
        frc_atom_objects.append(make_atom_object(chemical_symbols, configuration.arrays['forces'], configuration.cell))
        vel_atom_objects.append(make_atom_object(chemical_symbols, configuration.arrays['vel'], configuration.cell))

    # Write individual information into xyz file
    write(pos_xyz_str, pos_atom_objects)
    write(frc_xyz_str, frc_atom_objects)
    write(vel_xyz_str, vel_atom_objects)

def get_unique_atom_types(topology):
    """Obtain unique atom types from a reference topology.

       input:
       topology: (pdb) Reference topology, often in a format of pdb

       output:
       atom_types: (list) List of unique atom type strings
    """
    atom_types = list(set(atom.name for atom in topology.atoms))

    return atom_types

def load_with_cell(filename, unitcell_length_matrix, unitcell_angle_matrix,
                   start=None, stop=None, step=None, **kwargs):
    """Load a trajectory and inject cell dimensions from a topology PDB file if not present.
    All arguments and keyword arguments are passed on to `mdtraj.load`. The `top`
    keyword argument is used load a PDB file and get cell information from it.

    input:
    file_name (str):

    """
    # load the "topology frame" to get cell dimensions
    top = kwargs.get("top")
    if top is not None and isinstance(top, str):
        # load topology frame - just the first one from the file, in case there are more frames
        frame_top = mdt.load_frame(top, 0)
        unitcell_lengths = frame_top.unitcell_lengths
        unitcell_angles = frame_top.unitcell_angles
        if (unitcell_lengths is None) or (unitcell_angles is None):
            raise ValueError("Frame providing topology is missing cell information.")
    else:
        raise ValueError("Provide a PDB with cell dimensions.")

    # load the trajectory itself
    trj = mdt.load(filename, **kwargs)
    trj = trj[start:stop:step]

    # inject the cell information
    trj.unitcell_lengths = unitcell_length_matrix
    trj.unitcell_angles = unitcell_angle_matrix

    return trj

def make_atom_object(atomic_string, coordinate, cell):
    """Create simple atom object based on chemical symbol and "position-like" vectors

           input:
           atomic_string: (nd str array) nd string array
           coordinate: (nd float array) "position-like" vector

           output:
           atoms (ASE Atoms object): atom object

    """
    # Build ase atom object from starch
    tmp_str = 'H' * len(atomic_string)

    # Ghost molecule!
    atoms = Atoms(tmp_str)

    # Inheritance properties from input
    atoms.set_chemical_symbols(atomic_string)
    atoms.set_positions(coordinate)
    atoms.set_pbc([True, True, True])
    atoms.cell = cell
    return atoms



